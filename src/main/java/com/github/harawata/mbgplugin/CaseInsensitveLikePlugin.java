/*-
 *  Copyright 2009 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.github.harawata.mbgplugin;

import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.codegen.ibatis2.Ibatis2FormattingUtilities;

/**
 * This plugin adds addXxxLikeInsensitve() methods to the example class.<br>
 * Unlike the default(bundled) plugin with the same name, the methods generated by this plugin
 * silently ignores <code>null</code>.
 * 
 * @author Iwao AVE!
 */
public class CaseInsensitveLikePlugin extends PluginAdapter
{

	public boolean validate(List<String> warnings)
	{
		return true;
	}

	@Override
	public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
		IntrospectedTable introspectedTable)
	{
		for (InnerClass innerClass : topLevelClass.getInnerClasses())
		{
			if ("GeneratedCriteria".equals(innerClass.getType().getShortName()))
			{
				modifyGeneratedCriteria(introspectedTable, innerClass);
			}
		}
		return true;
	}

	private void modifyGeneratedCriteria(IntrospectedTable introspectedTable,
		InnerClass innerClass)
	{
		for (IntrospectedColumn introspectedColumn : introspectedTable.getNonBLOBColumns())
		{
			if (!introspectedColumn.isJdbcCharacterColumn()
				|| !introspectedColumn.isStringColumn())
			{
				continue;
			}

			Method method = new Method();
			method.setVisibility(JavaVisibility.PUBLIC);
			method.addParameter(new Parameter(introspectedColumn.getFullyQualifiedJavaType(),
				"value"));

			StringBuilder sb = new StringBuilder();
			sb.append(introspectedColumn.getJavaProperty());
			sb.setCharAt(0, Character.toUpperCase(sb.charAt(0)));
			sb.insert(0, "and");
			sb.append("LikeInsensitive");
			method.setName(sb.toString());
			method.setReturnType(FullyQualifiedJavaType.getCriteriaInstance());

			sb.setLength(0);
			sb.append("addCriterion(\"upper(");
			sb.append(Ibatis2FormattingUtilities.getAliasedActualColumnName(introspectedColumn));
			sb.append(") like\", value.toUpperCase(), \"");
			sb.append(introspectedColumn.getJavaProperty());
			sb.append("\");");
			method.addBodyLine("if (value == null){ return (Criteria)this; }");
			method.addBodyLine(sb.toString());
			method.addBodyLine("return (Criteria)this;");

			innerClass.addMethod(method);
		}
	}

}
